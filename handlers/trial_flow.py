from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from database.db import async_session
from database.models import User
from datetime import datetime, timedelta

router = Router()

# –®–∞–≥ 1: –ü–æ–¥–ø–∏—Å–∫–∞
@router.callback_query(F.data == "free_trial")
async def send_subscription_links(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1", url="https://t.me/argen1233")],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2", url="https://t.me/argen12344")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
    )
    await callback.message.edit_text("üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'", reply_markup=keyboard)


# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        chat1 = await bot.get_chat_member(chat_id="@argen1233", user_id=user_id)
        chat2 = await bot.get_chat_member(chat_id="@argen12344", user_id=user_id)
        subscribed = chat1.status in ["member", "administrator", "creator"] and \
                     chat2.status in ["member", "administrator", "creator"]
    except Exception:
        subscribed = False

    if subscribed:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="choose_category")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="free_trial")]
            ]
        )
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")


# –®–∞–≥ 3: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@router.callback_query(F.data == "choose_category")
async def choose_category(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéâ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="check_subscription")]
        ]
    )
    await callback.message.edit_text("üîé –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞.\n–¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç—Ä–∏–∞–ª:", reply_markup=keyboard)


# –®–∞–≥ 4: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∏–∞–ª–∞

@router.callback_query(F.data == "activate_trial")
async def activate_trial(callback: CallbackQuery):
    async with async_session() as session:
        user = await session.scalar(
            select(User).where(User.telegram_id == callback.from_user.id)
        )

        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        now = datetime.utcnow()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        trial_end = user.trial_end
        if isinstance(trial_end, str):
            try:
                trial_end = datetime.fromisoformat(trial_end)
            except ValueError:
                trial_end = None

        # –ï—Å–ª–∏ —Ç—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if trial_end and trial_end > now:
            await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç—Ä–∏–∞–ª –¥–æ:\n<b>{trial_end.strftime('%Y-%m-%d %H:%M:%S')}</b>",
                parse_mode="HTML"
            )
        else:
            user.trial_end = now + timedelta(days=3)
            await session.commit()
            await callback.message.edit_text("‚úÖ –¢—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è! üéâ")



