# handlers/user/status.py
from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select
from datetime import datetime
from database.db import async_session
from database.models import User

router = Router()

@router.message(F.text == "/status")
async def status_handler(message: Message):
    async with async_session() as session:
        user = await session.scalar(
            select(User).where(User.telegram_id == message.from_user.id)
        )

        if not user:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start.")
            return

        now = datetime.utcnow()
        if user.is_subscribed and user.subscription_end and user.subscription_end > now:
            days_left = (user.subscription_end - now).days
            await message.answer(f"üü¢ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
        elif user.trial_end and user.trial_end > now:
            days_left = (user.trial_end - now).days
            await message.answer(f"üü° –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç—Ä–∏–∞–ª.\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
        else:
            await message.answer("üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–í–≤–µ–¥–∏—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")

