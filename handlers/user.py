# handlers/user.py
from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import User
from database.db import async_session
from datetime import datetime, timedelta

router = Router()

@router.message(F.text == "/start")
async def start_handler(message: Message):
    async with async_session() as session:
        user_in_db = await session.scalar(
            select(User).where(User.telegram_id == message.from_user.id)
        )

        if user_in_db:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ")
            return

        new_user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            registered_at=datetime.utcnow(),
            trial_end=datetime.utcnow() + timedelta(days=3),
            is_subscribed=False,
        )

        session.add(new_user)
        await session.commit()

        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è.\n"
            "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º üì©"
        )

    @router.message(F.text == "/status")
    async def status_handler(message: Message):
        async with async_session() as session:
            user = await session.scalar(
                select(User).where(User.telegram_id == message.from_user.id)
            )

            if not user:
                await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start.")
                return

            now = datetime.utcnow()
            if user.is_subscribed and user.subscription_end and user.subscription_end > now:
                days_left = (user.subscription_end - now).days
                await message.answer(f"üü¢ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
            elif user.trial_end and user.trial_end > now:
                days_left = (user.trial_end - now).days
                await message.answer(f"üü° –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç—Ä–∏–∞–ª.\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
            else:
                await message.answer("üî¥ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–í–≤–µ–¥–∏—Ç–µ /subscribe –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")

    @router.message(F.text == "/help")
    async def help_handler(message: Message):
        await message.answer(
            "üìñ <b>–ü–æ–º–æ—â—å</b>\n"
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏/—Ç—Ä–∏–∞–ª–∞\n"
            "/subscribe ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ üîç"
        )

    @router.message(F.text == "/subscribe")
    async def subscribe_handler(message: Message):
        await message.answer(
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç 299‚ÇΩ/–º–µ—Å.\n"
            "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ üöß"
        )
